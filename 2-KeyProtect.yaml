apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: Executes logic to build, tag and push a container
      image using the intermediate sha tag to the image-url
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    description: Executes logic to build, tag and push a container image using the
      intermediate sha tag to the image-url
  name: ibm-keyprotect-dev-v2-0-1
  namespace: dev-freelancer
spec:
  params:
  - name: git-url
    type: string
  - default: master
    name: git-revision
    type: string
  - default: /source
    name: source-dir
    type: string
  - default: ""
    name: image-server
    type: string
  - default: ""
    name: image-namespace
    type: string
  - default: ""
    name: image-repository
    type: string
  - default: ""
    name: image-tag
    type: string
  - default: ""
    name: image-url
    type: string    
  - default: ""
    name: image-release
    type: string    
  - default: quay.io/containers/skopeo:v1.1.0
    name: BUILDER_IMAGE
    type: string
  - default: ./Dockerfile
    name: DOCKERFILE
    type: string
  - default: .
    name: CONTEXT
    type: string
  - default: "false"
    name: TLSVERIFY
    type: string
  - default: docker
    name: FORMAT
    type: string
  - default: overlay
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  stepTemplate:
    name: ""
    resources: {}
    volumeMounts:
    - mountPath: $(params.source-dir)
      name: source
  steps:
  - env:
    - name: GIT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    - name: GIT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    image: alpine/git
    name: git-clone
    resources: {}
    script: |
      set +x
      if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
          git clone "https://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F 'https://' '{print $2}')" $(params.source-dir)
      else
          set -x
          git clone $(params.git-url) $(params.source-dir)
      fi
      set -x
      cd $(params.source-dir)
      git checkout $(params.git-revision)
  - env:
    - name: REGISTRY_USER
      valueFrom:
        secretKeyRef:
          key: REGISTRY_USER
          name: ibmcloud-apikey
          optional: true
    - name: REGISTRY_PASSWORD
      valueFrom:
        secretKeyRef:
          key: APIKEY
          name: ibmcloud-apikey
          optional: true
    - name: IBM_CLOUD_APIKEY
      valueFrom:
        secretKeyRef:
          key: APIKEY
          name: ibmcloud-apikey
          optional: true
    - name: IBM_CLOUD_REGION
      valueFrom:
        configMapKeyRef:
          name: ibmcloud-config
          key: REGION
          optional: true
    - name: KP_PUBLIC
      valueFrom:
        secretKeyRef:
          name: keyprotect-publickey
          key: KP_PUBLIC
          optional: true
    - name: KEYPROTECT_WRAP_PUBLIC
      valueFrom:
        secretKeyRef:
          name: keyprotect-wrap-public
          key: publicKey
          optional: true
    - name: KEYPROTECT_WRAP_PRIVATE
      valueFrom:
        secretKeyRef:
          name: keyprotect-wrap-private
          key: privateKey
          optional: true     
    image: $(params.BUILDER_IMAGE)
    name: create-keys
    resources: {}
    script: |
      #!/bin/bash
      KEY_NAME=$(params.image-namespace)
      yum install skopeo jq gnupg2-smime tree pinentry -y
      curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
      chmod +x ./kubectl; sudo mv ./kubectl /usr/local/bin/kubectl; kubectl version --client
      mkdir user_keys; cd user_keys
      ibmcloud plugin install key-protect -r "IBM Cloud"
      ibmcloud login --apikey ${IBM_CLOUD_APIKEY} -r ${IBM_CLOUD_REGION}
      ibmcloud target -r ${IBM_CLOUD_REGION}
      SERVICE_CREATED=$(ibmcloud resource service-instances | grep ${KEY_NAME}-srv || true)
      if [ -z "${SERVICE_CREATED}" ]; then 
        ibmcloud resource service-instance-create ${KEY_NAME}-srv kms tiered-pricing ${IBM_CLOUD_REGION}
      else 
        echo "****Service Already Created"
      fi
      SERVICE_INSTANCE=$(ibmcloud resource service-instance ${KEY_NAME}-srv --id | grep "::" | awk {'print $2'})
      echo "****List Keys created "
      ibmcloud kp keys --instance-id ${SERVICE_INSTANCE}
      PRIVATE_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-private" | awk {'print $1'} || true )
      PUBLIC_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-public" | awk {'print $1'} || true )
      APP_IMAGE_ORIGINAL="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag).original"
      APP_IMAGE_SIGNED="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag)"
      
      cat >signsample <<EOF
            %echo Generating a basic OpenPGP key
            %no-protection
            Key-Type: DSA
            Key-Length: 1024
            Subkey-Type: ELG-E
            Subkey-Length: 1024
            Name-Real: SignSample
            Name-Email: signsample@foo.bar
            Expire-Date: 0
            Passphrase: abc
            %pubring signsample.pub
            %secring signsample.sec
            # Do a commit here, so that we can later print "done" :-)
            %commit
            %echo done
      EOF
      export GPG_TTY=$(tty)      
      cat ~/.gnupg/gpg.conf
      echo "*****Create gpg-agent.conf"
      cat >/etc/gnupg/gpg-agent.conf <<EOF
            pinentry-program /usr/bin/pinentry-curses
            allow-loopback-pinentry
      EOF
      echo "*****Create gpg.conf"
      cat >~/.gnupg/gpg.conf <<EOF
            use-agent 
            pinentry-mode loopback
      EOF
      gpg --batch -v --gen-key signsample
      echo "*********Import the Public GPG to Keystore"
      gpg --import signsample.pub
      echo "*********List Secret Keys"
      gpg --list-secret-keys
      echo "*********List Keys"
      gpg --list-keys
      echo "*********Make sigstore"
      mkdir -p /source/sigstore/
      chmod 777 /source/sigstore/
      echo "*********Make sigstore "
      echo "*********Change Path Sigstore"
      sed -i "s/var\/lib\/containers\/sigstore/source\/sigstore/g" /etc/containers/registries.d/default.yaml
      echo "*********Make sigstore"
      cat /etc/containers/registries.d/default.yaml
      ls -lsrt ~/.gnupg/
      echo "*********Export public key"
      gpg --armor --export signsample@foo.bar > ${KEY_NAME}Pub.pub
      gpg --export-secret-key -a signsample@foo.bar > ${KEY_NAME}Priv.key
      REGISTRY_SERVER_FROM=$(echo "$(params.image-server)" | awk -F : '{print $1}')
      kubectl delete configmap $(params.image-namespace)-registry-config -n openshift-config --ignore-not-found
      kubectl create configmap $(params.image-namespace)-registry-config --from-file=${REGISTRY_SERVER_FROM}..5000=${KEY_NAME}Pub.pub -n openshift-config
      kubectl get configmap -n openshift-config
    
      if [ -z "${PRIVATE_KEY}" ] && [ -z "${PUBLIC_KEY}" ] ; then 
        echo "*****Keys are not created"
      else 
        echo "****Keys Already Exists, Retriving the information"
        ibmcloud kp key delete --instance-id ${SERVICE_INSTANCE} ${PRIVATE_KEY}
        ibmcloud kp key delete --instance-id ${SERVICE_INSTANCE} ${PUBLIC_KEY}
      fi
      echo "****Create Key's on Key Protect"
      ibmcloud kp key create kp-${KEY_NAME}-private -i ${SERVICE_INSTANCE}
      ibmcloud kp key create kp-${KEY_NAME}-public -i ${SERVICE_INSTANCE}
      echo "***** GET VALUES"
      PRIVATE_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-private" | awk {'print $1'} || true)
      PUBLIC_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-public" | awk {'print $1'} || true )
      echo "***** WRAPPING"
      ibmcloud kp key wrap ${PRIVATE_KEY} --instance-id ${SERVICE_INSTANCE} -p "$(echo ${KEY_NAME}Pub.pub | base64)" --output json | jq -r '.["Ciphertext"]' > PRIVATE_WRAP.pem
      ibmcloud kp key wrap ${PUBLIC_KEY} --instance-id ${SERVICE_INSTANCE} -p "$(echo ${KEY_NAME}Priv.key | base64)" --output json | jq -r '.["Ciphertext"]' > PUBLIC_WRAP.pub
      kubectl delete secret keyprotect-wrap-public --ignore-not-found
      kubectl delete secret keyprotect-wrap-private --ignore-not-found
      kubectl create secret generic keyprotect-wrap-public --from-file=publicKey=PUBLIC_WRAP.pub
      kubectl create secret generic keyprotect-wrap-private --from-file=privateKey=PRIVATE_WRAP.pem
      ibmcloud kp keys --instance-id ${SERVICE_INSTANCE}
      echo "*****SKOPEO with Sign"
      echo "********************************************"
      skopeo copy --src-tls-verify=false --dest-tls-verify=false --insecure-policy --sign-by signsample@foo.bar docker://${APP_IMAGE_ORIGINAL} docker://${APP_IMAGE_SIGNED}
      tree -lrth /source/sigstore/
      skopeo inspect --tls-verify=false docker://${APP_IMAGE_SIGNED}
      kubectl delete secret keyprotect-publickey --ignore-not-found
      kubectl create secret generic keyprotect-publickey --from-literal=name=signsample@foo.bar --from-file=publicKey=${KEY_NAME}Pub.pub
      
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(params.source-dir)
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: source