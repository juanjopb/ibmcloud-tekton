apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: Executes logic to build, tag and push a container
      image using the intermediate sha tag to the image-url
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    description: Executes logic to build, tag and push a container image using the
      intermediate sha tag to the image-url
  name: ibm-keyprotect-dev-v2-0-1
  namespace: dev-freelancer
spec:
  params:
  - name: git-url
    type: string
  - default: master
    name: git-revision
    type: string
  - default: /source
    name: source-dir
    type: string
  - default: ""
    name: image-server
    type: string
  - default: ""
    name: image-namespace
    type: string
  - default: ""
    name: image-repository
    type: string
  - default: ""
    name: image-tag
    type: string
  - default: ""
    name: image-release
    type: string    
  - default: quay.io/containers/skopeo:v1.1.0
    name: BUILDER_IMAGE
    type: string
  - default: ./Dockerfile
    name: DOCKERFILE
    type: string
  - default: .
    name: CONTEXT
    type: string
  - default: "false"
    name: TLSVERIFY
    type: string
  - default: docker
    name: FORMAT
    type: string
  - default: overlay
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  stepTemplate:
    name: ""
    resources: {}
    volumeMounts:
    - mountPath: $(params.source-dir)
      name: source
  steps:
  - env:
    - name: GIT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    - name: GIT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    image: alpine/git
    name: git-clone
    resources: {}
    script: |
      set +x
      if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
          git clone "https://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F 'https://' '{print $2}')" $(params.source-dir)
      else
          set -x
          git clone $(params.git-url) $(params.source-dir)
      fi
      set -x
      cd $(params.source-dir)
      git checkout $(params.git-revision)
  - env:
    - name: REGISTRY_USER
      valueFrom:
        secretKeyRef:
          key: REGISTRY_USER
          name: ibmcloud-apikey
          optional: true
    - name: REGISTRY_PASSWORD
      valueFrom:
        secretKeyRef:
          key: APIKEY
          name: ibmcloud-apikey
          optional: true
    - name: IBM_CLOUD_APIKEY
      valueFrom:
        secretKeyRef:
          key: APIKEY
          name: ibmcloud-apikey
          optional: true
    - name: IBM_CLOUD_REGION
      valueFrom:
        configMapKeyRef:
          name: ibmcloud-config
          key: REGION
          optional: true
    - name: KP_PUBLIC
      valueFrom:
        secretKeyRef:
          name: keyprotect-publickey
          key: KP_PUBLIC
          optional: true
    - name: KEYPROTECT_WRAP_PUBLIC
      valueFrom:
        secretKeyRef:
          name: keyprotect-wrap-public
          key: publicKey
          optional: true
    - name: KEYPROTECT_WRAP_PRIVATE
      valueFrom:
        secretKeyRef:
          name: keyprotect-wrap-private
          key: privateKey
          optional: true     
    image: $(params.BUILDER_IMAGE)
    name: create-keys
    resources: {}
    script: |
      #!/bin/bash
      KEY_NAME=$(params.image-namespace)
      yum update -y
      yum install jq pinentry -y
      curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
      chmod +x ./kubectl; sudo mv ./kubectl /usr/local/bin/kubectl; kubectl version --client
      ibmcloud plugin install key-protect -r "IBM Cloud"
      ibmcloud login --apikey ${IBM_CLOUD_APIKEY} -r ${IBM_CLOUD_REGION}
      ibmcloud target -r ${IBM_CLOUD_REGION} -g appdev-cloud-native
      SERVICE_CREATED=$(ibmcloud resource service-instances | grep ${KEY_NAME}-srv || true)
      if [ -z "${SERVICE_CREATED}" ]; then 
        ibmcloud resource service-instance-create ${KEY_NAME}-srv kms tiered-pricing ${IBM_CLOUD_REGION}
      else 
        echo "****Service Already Created"
      fi
      SERVICE_INSTANCE=$(ibmcloud resource service-instance ${KEY_NAME}-srv --id | grep "::" | awk {'print $2'})
      echo "****List Keys created "
      ibmcloud kp keys --instance-id ${SERVICE_INSTANCE}
      PRIVATE_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-private" | awk {'print $1'} || true )
      PUBLIC_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-public" | awk {'print $1'} || true )
      APP_IMAGE_ORIGINAL="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag)"
      APP_IMAGE_SIGNED="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag).signed"

      cat >signsample <<EOF
            %echo Generating a basic OpenPGP key
            Key-Type: DSA
            Key-Length: 1024
            Subkey-Type: ELG-E
            Subkey-Length: 1024
            Name-Real: SignSample
            Name-Email: signsample@foo.bar
            Expire-Date: 0
            Passphrase: abc
            %pubring signsample.pub
            %secring signsample.sec
            # Do a commit here, so that we can later print "done" :-)
            %commit
            %echo done
      EOF
      PASSPHRASE=abc
      gpg2 --batch -v --gen-key signsample
      echo "*********Import the Public GPG to Keystore"
      gpg --import signsample.pub
      cat signsample.pub
      echo "*********List Secret Keys"
      gpg2 --list-secret-keys
      echo "*********List Keys"
      gpg2 --list-keys
      echo "*********Make sigstore"
      mkdir -p /tekton/home/sigstore
      echo "*********Change Path Sigstore"
      sed -i "s/var\/lib\/containers\/sigstore/tekton\/home\/sigstore\//g" /etc/containers/registries.d/default.yaml
      echo "*********Make sigstore"
      cat /etc/containers/registries.d/default.yaml
      ls -lsrt /tekton/home/.gnupg/
      echo "*********Export public key"
      gpg --armor --export 'signsample@foo.bar' > sign-sample.pub
      #cat sign-sample.pub
      cat >/etc/gnupg/gpg-agent.conf <<EOF
            pinentry-program /usr/bin/pinentry-curses
            allow-loopback-pinentry
      EOF
      echo RELOADAGENT | gpg-connect-agent
      skopeo --tls-verify=false --insecure-policy copy --sign-by signsample@foo.bar docker://${APP_IMAGE_ORIGINAL} docker://${APP_IMAGE_SIGNED} <<<$PASSPHRASE
      ls -lrth /tekton/home/sigstore


      ###if [ -z "${PRIVATE_KEY}" ] && [ -z "${PUBLIC_KEY}" ] ; then 
      ###  ####echo "****Creating Keys"
      ###  ####mkdir user_keys; cd user_keys
      ###  ####openssl genrsa --out ${KEY_NAME}Private.pem
      ###  ####openssl rsa -in ${KEY_NAME}Private.pem -pubout -out ${KEY_NAME}Pub.pub
      ###  ####echo "****Base64 Keys"
      ###  ####openssl enc -base64 -A -in ${KEY_NAME}Private.pem -out ${KEY_NAME}Private.b64
      ###  ####openssl enc -base64 -A -in ${KEY_NAME}Pub.pub -out ${KEY_NAME}Pub.b64
      ###  ####echo "****Create Key's"
      ###  ####ibmcloud kp key create kp-${KEY_NAME}-private -i ${SERVICE_INSTANCE}
      ###  ####ibmcloud kp key create kp-${KEY_NAME}-public -i ${SERVICE_INSTANCE}
      ###  ####echo "***** GET VALUES"
      ###  ####PRIVATE_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-private" | awk {'print $1'} || true)
      ###  ####PUBLIC_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-public" | awk {'print $1'} || true )
      ###  ####echo "***** WRAPPING"
      ###  ####ibmcloud kp key wrap ${PRIVATE_KEY} --instance-id ${SERVICE_INSTANCE} -p "$(cat ${KEY_NAME}Private.b64)" --output json | jq -r '.["Ciphertext"]' > PRIVATE_WRAP.pem
      ###  ####ibmcloud kp key wrap ${PUBLIC_KEY} --instance-id ${SERVICE_INSTANCE} -p "$(cat ${KEY_NAME}Pub.b64)" --output json | jq -r '.["Ciphertext"]' > PUBLIC_WRAP.pub
      ###  ####kubectl create secret generic keyprotect-publickey --from-file=KP_PUBLIC=${KEY_NAME}Pub.pub
      ###  ####kubectl create secret generic keyprotect-wrap-public --from-file=publicKey=PUBLIC_WRAP.pub
      ###  ####kubectl create secret generic keyprotect-wrap-private --from-file=privateKey=PRIVATE_WRAP.pem
      ###else 
      ###  ###mkdir user_keys; cd user_keys
      ###  ###echo "Keys Already Exists, Retriving the information"
      ###  ###ibmcloud kp key unwrap ${PRIVATE_KEY} --instance-id ${SERVICE_INSTANCE} ${KEYPROTECT_WRAP_PRIVATE} --output json | jq -r '.["Plaintext"]' > PRIVATE_B64.b64
      ###  ###ibmcloud kp key unwrap ${PUBLIC_KEY} --instance-id ${SERVICE_INSTANCE} ${KEYPROTECT_WRAP_PUBLIC} --output json | jq -r '.["Plaintext"]' > PUBLIC_B64.b64
      ###  ###openssl enc -base64 -A -d -in PRIVATE_B64.b64 -out ${KEY_NAME}Private.pem
      ###  ###openssl enc -base64 -A -d -in PUBLIC_B64.b64 -out ${KEY_NAME}Pub.pub
      ###fi
      ###ibmcloud kp keys --instance-id ${SERVICE_INSTANCE}
      ###cd ..
      
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(params.source-dir)
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: source