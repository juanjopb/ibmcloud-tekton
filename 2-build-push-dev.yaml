apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: Executes logic to build, tag and push a container
      image using the intermediate sha tag to the image-url
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    description: Executes logic to build, tag and push a container image using the
      intermediate sha tag to the image-url
  name: ibm-build-tag-push-dev-v2-0-1
  namespace: dev-freelancer
spec:
  params:
  - name: git-url
    type: string
  - default: master
    name: git-revision
    type: string
  - default: /source
    name: source-dir
    type: string
  - default: ""
    name: image-server
    type: string
  - default: ""
    name: image-namespace
    type: string
  - default: ""
    name: image-repository
    type: string
  - default: ""
    name: image-tag
    type: string
  - default: ""
    name: image-release
    type: string    
  - default: quay.io/buildah/stable:v1.15.0
    name: BUILDER_IMAGE
    type: string
  - default: ./Dockerfile
    name: DOCKERFILE
    type: string
  - default: .
    name: CONTEXT
    type: string
  - default: "false"
    name: TLSVERIFY
    type: string
  - default: docker
    name: FORMAT
    type: string
  - default: overlay
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  stepTemplate:
    name: ""
    resources: {}
    volumeMounts:
    - mountPath: $(params.source-dir)
      name: source
  steps:
  - env:
    - name: GIT_PASSWORD
      valueFrom:
        secretKeyRef:
          key: password
          name: git-credentials
          optional: true
    - name: GIT_USERNAME
      valueFrom:
        secretKeyRef:
          key: username
          name: git-credentials
          optional: true
    image: alpine/git
    name: git-clone
    resources: {}
    script: |
      set +x
      if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
          git clone "https://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F 'https://' '{print $2}')" $(params.source-dir)
      else
          set -x
          git clone $(params.git-url) $(params.source-dir)
      fi
      set -x
      cd $(params.source-dir)
      git checkout $(params.git-revision)
  - env:
    - name: REGISTRY_USER
      valueFrom:
        secretKeyRef:
          key: REGISTRY_USER
          name: ibmcloud-apikey
          optional: true
    - name: REGISTRY_PASSWORD
      valueFrom:
        secretKeyRef:
          key: APIKEY
          name: ibmcloud-apikey
          optional: true
    - name: IBM_CLOUD_APIKEY
      valueFrom:
        secretKeyRef:
          key: APIKEY
          name: ibmcloud-apikey
          optional: true
    - name: IBM_CLOUD_REGION
      valueFrom:
        configMapKeyRef:
          name: ibmcloud-config
          key: REGION
          optional: true
    - name: KP_PUBLIC
      valueFrom:
        secretKeyRef:
          name: keyprotect-publickey
          key: KP_PUBLIC
          optional: true
    - name: KEYPROTECT_WRAP_PUBLIC
      valueFrom:
        secretKeyRef:
          name: keyprotect-wrap-public
          key: publicKey
          optional: true
    - name: KEYPROTECT_WRAP_PRIVATE
      valueFrom:
        secretKeyRef:
          name: keyprotect-wrap-private
          key: privateKey
          optional: true          
    image: $(params.BUILDER_IMAGE)
    name: build
    resources: {}
    script: |
      #!/bin/bash
      KEY_NAME=$(params.image-namespace)
      yum install skopeo jq gnupg2-smime -y
      curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
      curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
      chmod +x ./kubectl; sudo mv ./kubectl /usr/local/bin/kubectl; kubectl version --client      
      mkdir user_keys; cd user_keys
      ibmcloud plugin install key-protect -r "IBM Cloud"
      ibmcloud login --apikey ${IBM_CLOUD_APIKEY} -r ${IBM_CLOUD_REGION}
      ibmcloud target -r ${IBM_CLOUD_REGION}
      echo "****Service Instance"
      SERVICE_INSTANCE=$(ibmcloud resource service-instance ${KEY_NAME}-srv --id | grep "::" | awk {'print $2'})
      echo "****Getting ID PRIVATE Key"
      PRIVATE_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-private" | awk {'print $1'} || true )
      ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-private"
      echo "****Getting ID PUBLIC Key"
      PUBLIC_KEY=$(ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-public" | awk {'print $1'} || true )
      ibmcloud kp keys --instance-id ${SERVICE_INSTANCE} | grep "kp-${KEY_NAME}-public"
      ibmcloud kp key unwrap ${PRIVATE_KEY} --instance-id ${SERVICE_INSTANCE} ${KEYPROTECT_WRAP_PRIVATE} --output json | jq -r '.["Plaintext"]' > PRIVATE_B64.b64
      ibmcloud kp key unwrap ${PUBLIC_KEY} --instance-id ${SERVICE_INSTANCE} ${KEYPROTECT_WRAP_PUBLIC} --output json | jq -r '.["Plaintext"]' > PUBLIC_B64.b64
      ls -lrth
      echo "****Base64 Keys"
      openssl enc -base64 -A -d -in PRIVATE_B64.b64 -out ${KEY_NAME}Private.pem
      openssl enc -base64 -A -d -in PUBLIC_B64.b64 -out ${KEY_NAME}Pub.pub
      ls -lrth
      cd ..

      APP_IMAGE="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag)"
      buildah --layers --storage-driver=$(params.STORAGE_DRIVER) bud --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) -f $(params.DOCKERFILE) -t ${APP_IMAGE} $(params.CONTEXT)
      set +x
      if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "$(params.image-server)" != "image-registry.openshift-image-registry.svc:5000"  ]]; then
        buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "$(params.image-server)"
        echo "buildah login -u "${REGISTRY_USER}" -p "xxxxx" "$(params.image-server)""
      fi
      set -x
      buildah --storage-driver=$(params.STORAGE_DRIVER) push --tls-verify=$(params.TLSVERIFY) --digestfile ./image-digest ${APP_IMAGE} docker://${APP_IMAGE}
      skopeo inspect --tls-verify=false docker://${APP_IMAGE}

      cat >signsample <<EOF
            %echo Generating a basic OpenPGP key
            Key-Type: DSA
            Key-Length: 1024
            Subkey-Type: ELG-E
            Subkey-Length: 1024
            Name-Real: SignSample
            Name-Email: signsample@foo.bar
            Expire-Date: 0
            Passphrase: abc
            %pubring signsample.pub
            %secring signsample.sec
            # Do a commit here, so that we can later print "done" :-)
            %commit
            %echo done
      EOF
      PASSPHRASE=abc
      echo "********* Located on ******"
      pwd
      gpg --batch -v --gen-key signsample
      echo "*********Import the Public GPG to Keystore"
      export GPG_TTY=$(tty)
      gpg --import signsample.pub
      echo "*********List Secret Keys"
      gpg --list-secret-keys
      echo "*********List Keys"
      gpg --list-keys
      echo "*********Make sigstore"
      mkdir -p /source/sigstore/
      chmod 777 /source/sigstore/
      echo "*********Make sigstore "
      echo "*********Change Path Sigstore"
      sed -i "s/var\/lib\/containers\/sigstore/source\/sigstore\//g" /etc/containers/registries.d/default.yaml
      echo "*********Make sigstore"
      cat /etc/containers/registries.d/default.yaml
      ls -lsrt /tekton/home/.gnupg/
      echo "*********Export public key"
      gpg --armor --export signsample@foo.bar > sign-sample.pub
      #SIGN_CA=$(cat sign-sample.pub)
      #echo "*********PRINT public key"
      #echo "${SIGN_CA}"
      ##cat ~/.gnupg/gpg.conf
      ##echo "*****Create gpg-agent.conf"
      ##cat >/etc/gnupg/gpg-agent.conf <<EOF
      ##      #pinentry-program /usr/bin/pinentry-curses
      ##      allow-loopback-pinentry
      ##EOF
      ##echo "*****Create gpg.conf"
      ##cat >~/.gnupg/gpg.conf <<EOF
      ##      use-agent 
      ##      pinentry-mode loopback
      ##EOF
      ##echo "*****REstart Agent"
      ##echo RELOADAGENT | gpg-connect-agent
      #echo "*****Create ConfigMap"
      #REGISTRY_SERVER_FROM=$(echo "$(params.image-server)" | awk -F : '{print $1}')
      #kubectl create configmap $(params.image-namespace)-registry-config --from-file=${REGISTRY_SERVER_FROM}..5000=sign-sample.pub -n openshift-config
      #kubectl get configmap -n openshift-config
      #echo "CHECK"
      #skopeo delete --force docker://image-registry.openshift-image-registry.svc:5000/dev-freelancer/dev-signing-sample-spring:3e69
      #skopeo delete --force docker://image-registry.openshift-image-registry.svc:5000/dev-freelancer/dev-signing-sample-spring:3e69
      echo "*****SKOPEO No Signed"
      skopeo copy --src-tls-verify=false --dest-tls-verify=false --insecure-policy docker://${APP_IMAGE} docker://${APP_IMAGE}.nosigned
      echo "*****SKOPEO DOCKER with Sign and with nopasshprase"
      skopeo copy --dest-creds=juanjosepb:Pillin52 --src-tls-verify=false --dest-tls-verify=false --insecure-policy --registries.d . --sign-by signsample@foo.bar docker://${APP_IMAGE} docker://docker.io/juanjosepb/signedimage:2.0.signed
      echo "*****SKOPEO DOCKER with Sign and passhprase"
      skopeo copy --dest-creds=juanjosepb:Pillin52 --src-tls-verify=false --dest-tls-verify=false --insecure-policy --registries.d . --sign-by signsample@foo.bar docker://${APP_IMAGE} docker://docker.io/juanjosepb/signedimage:3.0.signed <<<$PASSPHRASE
      echo "*****SKOPEO with Sign and passhprase"
      skopeo copy --src-tls-verify=false --dest-tls-verify=false --insecure-policy --registries.d . --sign-by signsample@foo.bar docker://${APP_IMAGE} docker://${APP_IMAGE}.newsigned <<<$PASSPHRASE
      ls -lrth /source/sigstore/
      
    securityContext:
      privileged: true
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(params.source-dir)
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  - emptyDir: {}
    name: source