apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ibm-img-enforce-v2-0-1
  annotations:
    description: Runs an image to install ibmcloud-image-enforcement. (CISE)
    app.openshift.io/description: Runs an image to install ibmcloud-image-enforcement
    app.openshift.io/vcs-uri: https://github.com/IBM/ibm-garage-tekton-tasks
    app.openshift.io/vcs-ref: master
  labels:
    version: 2.0.1
spec:
  params:
    - name: image-url
      description: "The location of image to scan on IBM Container Registry <server>/<namespace>/<repository>:<tag>"
    - name: scan-image
      description: Flag indicating that a scan should be performed
      default: "false"
    - default: 'garagecatalyst/ibmcloud-dev:1.1.3'
      name: tools-image
      type: string      
    - default: ""
      name: image-namespace
      type: string
    - default: ""
      name: image-server
      type: string      
    - default: ""
      name: app-name
      type: string
    - default: ""
      name: image-release
      type: string
    - default: ""
      name: image-repository
      type: string       
  volumes:
    - name: oci-image
      emptyDir: {}
  steps:
    - name: install-cise
      image: $(params.tools-image)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ibmcloud-apikey
              key: APIKEY
              optional: true
        - name: KP_PUBLIC
          valueFrom:
            secretKeyRef:
              name: keyprotect-publickey
              key: KP_PUBLIC
              optional: true
        - name: KEYPROTECT_WRAP_PUBLIC
          valueFrom:
            secretKeyRef:
              name: keyprotect-wrap-public
              key: KP_WRAP_PUBLIC
              optional: true
        - name: KEYPROTECT_WRAP_PRIVATE
          valueFrom:
            secretKeyRef:
              name: keyprotect-wrap-private
              key: KP_WRAP_PRIV
              optional: true                        
      volumeMounts:
        - mountPath: /var/oci
          name: oci-image
      securityContext:
        privileged: true
      script: |
        echo "INITIALIZING helm with client-only (no Tiller)"
        helm init --client-only 1> /dev/null 2> /dev/null
        helm version --client
        helm repo add iks-charts https://icr.io/helm/iks-charts

        #helm install cise iks-charts/ibmcloud-image-enforcement
        helm list --all-namespaces
        
        APP_IMAGE="$(params.image-server)/$(params.image-namespace)"
        echo ${APP_IMAGE}

        cat <<EOF >./securityPolicy.yaml
        apiVersion: securityenforcement.admission.cloud.ibm.com/v1beta1
        kind: ImagePolicy
        metadata:
          name: ibmcloud-$(params.app-name)-image-enforce-policy
        spec:
          repositories:
            - name: ${APP_IMAGE}/*
              policy:
              trust:
                  enabled: true
                  signerSecrets:
                  - name: <secret_name>
              va:
                  enabled: false
        EOF

        cat securityPolicy.yaml

        ##PERFORM_SCAN="$(params.scan-image)"
        ##if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
        ##  echo "User selected to skip scanning. Skipping Trivy scan."
        ##  exit 0
        ##fi
        ##IMAGE_FROM=$(params.image-url)
        ##REGISTRY_SERVER_FROM=$(echo "${IMAGE_FROM}" | awk -F / '{print $1}')
        ##IMAGE_TO="oci:/var/oci/image"
        ##IMAGE_FROM_TLS_VERIFY=$(params.IMAGE_FROM_TLS_VERIFY)
        ##echo "Tagging ${IMAGE_FROM} as ${IMAGE_TO}"
        ##set +x
        ##if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]] && [[ "${REGISTRY_SERVER_FROM}" != "image-registry.openshift-image-registry.svc:5000" ]]; then
        ##  IMAGE_FROM_CREDS="--src-creds ${REGISTRY_USER}:${REGISTRY_PASSWORD}"
        ##fi
        ##set -x
        ##if [ "${REGISTRY_SERVER_FROM}" =~ ":" ]; then
        ##  IMAGE_FROM_TLS_VERIFY="false"
        ##fi
        ##echo "skopeo copy --src-creds=xxxx --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}"
        ##set +x
        ##skopeo copy ${IMAGE_FROM_CREDS} --src-tls-verify=${IMAGE_FROM_TLS_VERIFY} docker://${IMAGE_FROM} ${IMAGE_TO}
    - name: scan-image
      image: $(params.tools-image)
      volumeMounts:
        - mountPath: /var/oci
          name: oci-image
      script: |
          set -e
          PERFORM_SCAN="$(params.scan-image)"

          ##if [[ "${PERFORM_SCAN}" == "false" ]] || [[ -z "${PERFORM_SCAN}" ]]; then
          ##  echo "User selected to skip scanning. Skipping Trivy scan."
          ##  exit 0
          ##fi
          ##PATH_TO_IMAGE="/var/oci/image"
          ##echo -e "Trivy Security Scan image in registry"
          ##trivy image --exit-code 0 --input ${PATH_TO_IMAGE}
          ##trivy image --exit-code 1 --severity CRITICAL --input ${PATH_TO_IMAGE}
          ##my_exit_code=$?
          ##echo "Scan exit code :--- $my_exit_code"
          ##if [ ${my_exit_code} == 1 ]; then
          ##    echo "Trivy scanning completed. CRITICAL Vulnerabilities found."
          ##    exit 1
          ##else
          ##  echo "Trivy scanning completed. CRITICAL vulnerabilities not found."
          ##fi
