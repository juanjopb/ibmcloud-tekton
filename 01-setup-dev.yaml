apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: >-
      Sets up the pipeline environment and generates/normalizes a number of
      param values
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: 'https://github.com/IBM/ibm-garage-tekton-tasks'
    description: >-
      Sets up the pipeline environment and generates/normalizes a number of
      param values
  name: ibm-setup-test-v2-0-1      
  namespace: dev-freelancer
  labels:
    version: 2.0.1
spec:
  params:
    - description: The url for the git repository
      name: git-url
      type: string
    - default: master
      description: 'The git revision (branch, tag, or sha) that should be built'
      name: git-revision
      type: string
    - default: /source
      name: source-dir
      type: string
    - default: ''
      description: The dev image (use image-release for released image)
      name: image-url
      type: string
    - default: ''
      description: The dev image registry server if params.image-url not provided
      name: image-server
      type: string
    - default: ''
      description: The dev image registry namespace if params.image-url not provided
      name: image-namespace
      type: string
    - default: ''
      description: >-
        The dev image registry repository/imagename if params.image-url not
        provided
      name: image-repository
      type: string
    - default: ''
      description: The dev image registry tag if params.image-url not provided
      name: image-tag
      type: string
    - default: ''
      description: The url of final released image
      name: image-release
      type: string
    - default: ''
      description: The openshift/kubernetes namespace to deploy dev app
      name: app-namespace
      type: string
    - default: ''
      description: The app name to be use in openshift/kuberentes deployment and helm chart
      name: app-name
      type: string
    - default: route
      name: deploy-ingress-type
      type: string
    - default: https
      name: health-protocol
      type: string
    - default: /health
      description: 'Endpoint to check health after deployment, liberty uses / not /health'
      name: health-endpoint
      type: string
    - default: 'false'
      description: Flag indicating that a Vulnerability Advisor scan should be performed
      name: scan-image
      type: string
    - default: 'garagecatalyst/ibmcloud-dev:1.1.3'
      name: tools-image
      type: string
    - default: 'docker.io/node:lts-stretch'
      name: js-image
      type: string
  results:
    - description: ''
      name: git-url
    - description: ''
      name: git-revision
    - description: ''
      name: source-dir
    - description: ''
      name: image-url
    - description: ''
      name: image-server
    - description: ''
      name: image-namespace
    - description: ''
      name: image-repository
    - description: ''
      name: image-tag
    - description: ''
      name: image-release
    - description: ''
      name: app-namespace
    - description: ''
      name: app-name
    - description: ''
      name: deploy-ingress-type
    - description: ''
      name: health-protocol
    - description: ''
      name: health-endpoint
    - description: ''
      name: tools-image
    - description: ''
      name: js-image
    - description: ''
      name: scan-image
  stepTemplate:
    name: ''
    resources: {}
    volumeMounts:
      - mountPath: $(params.source-dir)
        name: source
  steps:
    - env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: git-credentials
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: git-credentials
              optional: true
        - name: REGISTRY_RELEASE_SERVER
          valueFrom:
            configMapKeyRef:
              key: REGISTRY_URL
              name: ibmcloud-config
              optional: true
        - name: REGISTRY_RELEASE_NAMESPACE
          valueFrom:
            configMapKeyRef:
              key: REGISTRY_NAMESPACE
              name: ibmcloud-config
              optional: true
      image: alpine/git
      name: git-clone
      resources: {}
      script: >
        set +x

        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "https://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F 'https://' '{print $2}')" $(params.source-dir)
        else
            git clone $(params.git-url) $(params.source-dir)
        fi

        cd $(params.source-dir)

        git checkout $(params.git-revision)


        # Results

        # Defaults

        echo -n "$(params.git-url)">$(results.git-url.path)

        echo -n "$(git rev-parse --verify HEAD)">$(results.git-revision.path)

        echo -n "$(params.source-dir)">$(results.source-dir.path)

        echo -n "$(params.app-namespace)">$(results.app-namespace.path)

        echo -n "$(params.app-name)">$(results.app-name.path)

        echo -n
        "$(params.deploy-ingress-type)">$(results.deploy-ingress-type.path)

        echo -n "$(params.health-protocol)">$(results.health-protocol.path)

        echo -n "$(params.health-endpoint)">$(results.health-endpoint.path)

        echo -n "$(params.tools-image)">$(results.tools-image.path)

        echo -n "$(params.js-image)">$(results.js-image.path)

        echo -n "$(params.scan-image)">$(results.scan-image.path)



        REGISTRY_SERVER="$(params.image-server)"

        REGISTRY_NAMESPACE="$(params.image-namespace)"

        REGISTRY_REPOSITORY="$(params.image-repository)"

        REGISTRY_TAG="$(params.image-tag)"


        if [[ -n "$(params.image-url)" ]]; then
          REGISTRY_SERVER_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $1}')
          if [[ -n "${REGISTRY_SERVER_VALUE}" ]]; then
            REGISTRY_SERVER="${REGISTRY_SERVER_VALUE}"
          fi

          REGISTRY_NAMESPACE_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $2}')
          if [[ -n "${REGISTRY_NAMESPACE_VALUE}" ]]; then
            if [[ "${REGISTRY_NAMESPACE_VALUE}" = '$NAMESPACE' ]]; then
              REGISTRY_NAMESPACE=${NAMESPACE}
            else
              REGISTRY_NAMESPACE="${REGISTRY_NAMESPACE_VALUE}"
            fi
          fi

          REGISTRY_REPOSITORY_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $3}' |  awk -F : '{print $1}')
          if [[ -n "${REGISTRY_REPOSITORY_VALUE}" ]]; then
            REGISTRY_REPOSITORY="${REGISTRY_REPOSITORY_VALUE}"
          fi

          REGISTRY_TAG_VALUE=$(echo "$(params.image-url)" | awk -F / '{print $3}' | awk -F : '{print $2}')
          if [[ -n "${REGISTRY_TAG_VALUE}" ]]; then
            REGISTRY_TAG="${REGISTRY_TAG_VALUE}"
          fi
        fi


        if [[ -z "${REGISTRY_SERVER}" ]]; then
          # Assume is internal
          REGISTRY_SERVER="image-registry.openshift-image-registry.svc:5000"
        fi

        if [[ -z "${REGISTRY_NAMESPACE}" ]]; then
          # Assume current k8s namespace
          REGISTRY_NAMESPACE="${NAMESPACE}"
        fi

        if [[ -z "${REGISTRY_REPOSITORY}" ]]; then
          # Assume repo dir is image repository/image-name
          REGISTRY_REPOSITORY="$(basename $(echo -n $(git config --get remote.origin.url) | awk -F '.git' '{print $2}') | tr '[:upper:]' '[:lower:]' | sed 's/_/-/g')"
        fi

        if [[ -z "${REGISTRY_TAG}" ]]; then
          # Assume short git commit revision
          REGISTRY_TAG="$(git rev-parse --verify HEAD --short | tail -c 5)"
        fi

        echo -n "${REGISTRY_SERVER}">$(results.image-server.path)

        echo -n "${REGISTRY_NAMESPACE}">$(results.image-namespace.path)

        echo -n "${REGISTRY_REPOSITORY}">$(results.image-repository.path)

        echo -n "${REGISTRY_TAG}">$(results.image-tag.path)

        echo -n
        "${REGISTRY_SERVER}/${REGISTRY_NAMESPACE}/${REGISTRY_REPOSITORY}:${REGISTRY_TAG}">$(results.image-url.path)



        if [[ -z "$(params.app-namespace)" ]]; then
          # Assume current namespace
          echo -n "${NAMESPACE}">$(results.app-namespace.path)
        fi


        if [[ -z "$(params.app-name)" ]]; then
          # Assume image repository/name
          echo -n "${REGISTRY_REPOSITORY}">$(results.app-name.path)
        fi



        if [[ -n "$(params.image-release)" ]]; then
          REGISTRY_RELEASE_SERVER_VALUE=$(echo "$(params.image-release)" | awk -F / '{print $1}')
          if [[ -n "${REGISTRY_RELEASE_SERVER_VALUE}" ]]; then
            REGISTRY_RELEASE_SERVER="${REGISTRY_RELEASE_SERVER_VALUE}"
          fi

          REGISTRY_RELEASE_NAMESPACE_VALUE=$(echo "$(params.image-release)" | awk -F / '{print $2}')
          if [[ -n "${REGISTRY_RELEASE_NAMESPACE_VALUE}" ]]; then
            if [[ "${REGISTRY_RELEASE_NAMESPACE_VALUE}" = '$NAMESPACE' ]]; then
              REGISTRY_RELEASE_NAMESPACE=${NAMESPACE}
            else
              REGISTRY_RELEASE_NAMESPACE="${REGISTRY_RELEASE_NAMESPACE_VALUE}"
            fi
          elif [[ "${REGISTRY_RELEASE_SERVER}" = "image-registry.openshift-image-registry.svc:5000" ]]; then
            REGISTRY_RELEASE_NAMESPACE=${NAMESPACE}
          fi
        fi

        if [[ -z "${REGISTRY_RELEASE_NAMESPACE}" ]]; then
          # Assume current k8s namespace
          REGISTRY_RELEASE_NAMESPACE="${NAMESPACE}"
        fi

        REGISTRY_RELEASE_URL="${REGISTRY_RELEASE_SERVER}/${REGISTRY_RELEASE_NAMESPACE}/${REGISTRY_REPOSITORY}"

        echo -n "${REGISTRY_RELEASE_URL}">$(results.image-release.path)

        for f in /tekton/results/*; do echo "results.$(basename $f)=$(cat $f)";
        done
  volumes:
    - emptyDir: {}
      name: source
